#! /bin/bash
# Copyright (C) 2019  Petter A. Urkedal <urkedal@ndgf.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -e

. common.sh


# Mount root FS

targetdev="$DISK_0_PATH"

qemu-img convert -f qcow2 -O raw "$IMAGE_DIR/$IMAGE_FILE" "$targetdev"

rootmnt="`mktemp -d /tmp/ganeti-os-nocloud-root.XXXXXX`"
atexit "rmdir $rootmnt"
 
filesystem_dev_base=`kpartx -l -p- $targetdev | \
                     grep -m 1 -- "-1 : .*$targetdev" | \
                     awk '{print $1}'`
if [ -z "$filesystem_dev_base" ]; then
  log_error "Cannot interpret kpartx output and get partition mapping"
  exit 1
fi

kpartx -a -s -p- $targetdev > /dev/null
atexit "kpartx -d -s -p- $targetdev"

filesystem_dev="/dev/mapper/$filesystem_dev_base"
if [ ! -b "$filesystem_dev" ]; then
  log_error "Can't find kpartx mapped partition: $filesystem_dev"
  exit 1
fi
 
mount "$filesystem_dev" "$rootmnt"
atexit "umount $rootmnt"

mkdir -p "${rootmnt}${CLOUD_SEED_DIR}"


# Locate and copy user-data

compose_userdata()
{
    local parts part payload
    parse_list_parameter parts "${OSP_CLOUD_USERDATA}"
    for part in "${parts[@]}"; do
	payload="${part#*:}"
	case "${part%%:*}" in
	    file)
		(cd /etc/ganeti/nocloud/user-data; cat "${payload}")
		;;
	    base64)
		echo -n "${payload}" | base64 -d
		;;
	    line)
		echo "${payload}"
		;;
	    http|https|ftp|sftp|tftp|scp)
		curl -s "${payload}"
		;;
	esac
    done
}

if [ -n "${OSP_CLOUD_USERDATA}" ]; then
    # Using an intermediate temporary file to avoid holding the mount point in
    # case something goes wrong.
    userdata=`mktemp /tmp/ganeti-os-nocloud-userdata.XXXXXX`
    atexit "rm -f $userdata"
    compose_userdata > "${userdata}"
else
    for file in "${OS_VARIANT}.yml" "default.yml"; do
	if [ -e "/etc/ganeti/nocloud/user-data/${file}" ]; then
	    userdata="/etc/ganeti/nocloud/user-data/${file}"
	    break
	fi
    done
fi
if [ -n "${userdata}" ]; then
    install -m600 "${userdata}" "${rootmnt}${CLOUD_SEED_DIR}/user-data"
fi


# Generate meta-data and network-config

instance_id=$(uuidgen -r)

cat >"${rootmnt}${CLOUD_SEED_DIR}/meta-data" <<EOF
instance-id: ${instance_id}
preserve_hostname: false
fqdn: ${INSTANCE_NAME}
EOF

have_some_nic_ip()
{
    for i in $(seq 0 $(expr $NIC_COUNT - 1)); do
	nic_ip=$(eval echo \$NIC_${i}_IP)
	[ -z "$nic_ip" ] || return 0
    done
    return 1
}

lookup_ipv4()
{
    host -t A $1 | sed 's/.* address //' | grep -E '^[0-9.]+$'
}
lookup_ipv6()
{
    host -t AAAA $1 | sed 's/.* address //' | grep -E '^[0-9a-f:]+$'
}

generate_network_config()
{
    local address i ip ipv4_prefixlen ipv6_prefixlen prefixlen
    local dns_nameservers dns_search
    local IFS=,
    echo "version: 2"
    echo "ethernets:"
    for i in $(seq 0 $(expr $NIC_COUNT - 1)); do
	nic_ip=$(eval echo \$NIC_${i}_IP)
	[ -n "$nic_ip" -o $i = ${OSP_STATIC_HOST_INTERFACE:--1} ] || continue
	nic_mac=$(eval echo \$NIC_${i}_MAC)
	nic_network_subnet4=$(eval echo \$NIC_${i}_NETWORK_SUBNET)
	nic_network_subnet6=$(eval echo \$NIC_${i}_NETWORK_SUBNET6)
	nic_gateway4=$(eval echo \$NIC_${i}_NETWORK_GATEWAY)
	nic_gateway6=$(eval echo \$NIC_${i}_NETWORK_GATEWAY6)
	echo             "  eth${i}:"
	if [ -n "$nic_mac" ]; then
	    echo         "    match: {macaddress: '$nic_mac'}"
	else
	    echo         "    match: {name: 'eth${i}'}"
	fi
	if [ -z "$nic_network_subnet4" ]; then
	    ipv4_prefixlen=24
	else
	    ipv4_prefixlen="${nic_network_subnet4#*/}"
	fi
	if [ -z "$nic_network_subnet6" ]; then
	    ipv6_prefixlen=64
	else
	    ipv6_prefixlen="${nic_network_subnet6#*/}"
	fi
	echo             "    addresses:"
	case "$nic_ip" in
	    *.*.*.*)
		echo     "      - '${nic_ip}/${ipv4_prefixlen}'"
		;;
	    *:*)
		echo     "      - '${nic_ip}/${ipv6_prefixlen}'"
		;;
	esac
	if [ $i = ${OSP_STATIC_HOST_INTERFACE:--1} ]; then
	    for ip in $(lookup_ipv4 $INSTANCE_NAME); do
		if [ "$ip" != "$nic_ip" ]; then
		    echo "      - '${ip}/${ipv4_prefixlen}'"
		fi
	    done
	    for ip in $(lookup_ipv6 $INSTANCE_NAME); do
		if [ "$ip" != "$nic_ip" ]; then
		    echo "      - '${ip}/${ipv6_prefixlen}'"
		fi
	    done
	fi
	if [ -n "$nic_gateway4" ]; then
	    echo         "    gateway4: '${nic_gateway4}'"
	fi
	if [ -n "$nic_gateway6" ]; then
	    echo         "    gateway6: '${nic_gateway6}'"
	fi
	if [ -n "$OSP_DNS_NAMESERVERS" ]; then
	    echo         "    nameservers:"
	    echo         "        addresses:"
	    parse_list_parameter dns_nameservers "$OSP_DNS_NAMESERVERS"
	    for address in "${dns_nameservers[@]}"; do
		echo     "          - '${address}'"
	    done
	    if [ -n "${OSP_DNS_SEARCH}" ]; then
		echo     "        search:"
		parse_list_parameter dns_search "$OSP_DNS_SEARCH"
		for address in "${dns_search[@]}"; do
		    echo "          - '${address}'"
		done
	    fi
	fi
    done
}
if have_some_nic_ip || [ -n "$OSP_STATIC_HOST_INTERFACE" ]; then
    generate_network_config >"${rootmnt}${CLOUD_SEED_DIR}/network-config"
fi
